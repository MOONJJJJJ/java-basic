메서드 : 모듈화
중복 제거 : 동일 동작 하나의 메서드 호출로 중복 제거
변경 영향 범위 : 코드 변경 시 영향도 줄임
메서드 이름 추가 : 코드 파악 용이

객체지향 프로그래밍
캡슐화 : 속성+기능을 하나의 클래스에 응집

this : 인스턴스 자기자신의 참조값을 가리킴!
멤버 변수와 매개변수의 이름이 같을 경우 구분을 위해, this.변수명 사용 시 멤버 변수를 가리킴 (그냥 변수명만 쓰면 둘 다 있을 땐 매개변수를 가리킴)

생성자 : 객체를 생성한 직후 초기화를 위한 특별한 메서드
- 생성자의 이름은 클래스와 동일(대문자로 시작)
- 반환타입 없다
- 객체 생성과 동시에 초기화!
- 생성자 사용시, 초기화 안하면 컴파일 오류 발생시켜서 제약을 만들어준다 (원천적으로 버그 방지!)
- 생성자도 오버로딩 가능!
- 오버로딩 시 this() 기능 사용 시 생성자 내부에서 다른 생성자 호출 가능!
ex: MemberConstruct(String name, int age) {
        this(name, age, 50); //변경
    }
- this() 규칙 : 생성자 코드의 첫줄에만 사용 가능

기본 생성자 :
- 매개변수 없는 생성자를 기본 생성자라 함
- 클래스에 생성자가 하나도 없으면 자바 컴파일러는 기본 생성자를 자동으로 생성함
- 생성자가 하나라도 있으면 자바는 기본 생성자를 만들지 않음

패키지 : 폴더 / 클래스 : 파일
다른 패키지 사용 시 : 패키지 전체 경로 포함해서 클래스를 적어주어야 한다. (*(아스타?) 사용하여 일괄 선언 가능) -> import로 선언 시 코드에서 생략 가능! 코드 초반부에 import로 다 세팅해두쟈
*같은 이름의 클래스가 있다면, import는 둘 중 하나만 선택 가능 (자주 쓰는걸 import, 나머지는 전체경로 적어서 사용)
규칙 : 모두 소문자 사용, 패키지 이름의 앞 부분에는 일반적으로 회사의 도메인 이름을 거꾸로 사용. ex: com.company.myapp
패키지는 일반적으로 계층 구조를 이루나, 사용시엔 전부 별개의 패키지로 보고, 모두 import되어야 한다

접근 제어자 : 속성과 기능을 외부로부터 숨기는 것. 외부에서 필드나 메서드에 접근하는 것을 허용하거나 제한할 수 있따
내부 메서드에서 필드값에 대한 제약이 있을 때, 메서드를 통해서만 필드값 변경이 필요할 수 있으며, 이를 위해 필드 선언 시 접근제어자로 선언하여 접근을 제한한다
private : 모든 외부 호출 막음
default : 같은 패키지 안에서 호출 허용 (접근 제어자 안쓰면 이게 디폴트)
protected : 같은 패키지 안에서 호출 허용, 패키지 달라도 상속 관계의 호출 허용
public : 모든 외부 호출 허용

접근제어자는 필드/메서드/생성자에 사용가능, 지역변수엔 못 써

클래스 접근 제어자 : public, default만 사용 가능, public 클래스는 반드시 파일명과 동일해야함, 하나의 파일 내에 클래스 여러 개 생성 가능!!

<캡슐화>
캡슐화를 안전하게 완성하는 것 : 제어자
숨길것 : 데이터(메서드를 통해 접근해야함)/기능(외부말고 내부에서 쓰는 기능은 다숨겨)

자바 메모리 구조
메서드 영역 : 클래스 정보 보관, 붕어빵 틀
힙 영역 : 객체(인스턴스) 생성되는 영역, 붕어빵, 참고로 배열도 이 영역에 생성됨
스택 영역 : 실제 프로그램이 실행되는 영역, 메서드를 실행할 때 마다 하나씩 쌓임
단축키 컨트롤+W :

static : 공용 변수로 사용. 인스턴스가 여러개여도 static변수는 1개만 존재하며 공용으로 사용함
멤버 변수에 static을 붙이면 static 변수, 정적 변수, 클래스 변수라 한다. static 변수는 인스턴스 영역이 아닌 메서드 영역에서 관리함. (붕어빵틀에서 특별히 관리!)
클래스명.변수명으로 접근함 (바로 접근), 해당 클래스 내에선 클래스명 생략 가능
정적변수는 인스턴스를 통한 접근도 가능하고(권장안함), 클래스를 통한 접근도 가능함 (객체명.변수명, 클래스명.변수명)

static 메서드 : 메서드에 static 붙이면, 객체 생성 없이 클래스명 + . + 메서드 명으로 바로 호출가능
static 메서드는 static 변수나 static 메서드만 사용가능함. 인스턴스 변수나 메서드를 static 메서드 내에서 사용 불가. 모든 곳에서 static 메서드 호출 가능함.
(정적 메서드는 객체 생성없어도 사용가능하므로, 인스턴스 변수/메서드 사용 불가함)
*외부에서 참조값 넘어오는 경우(매개변수 전달)는 정적 메서드에서도 인스턴스 값 호출 가능

import static : 선언시 클래스명 안적어도 메서드만으로 static 메서드 호출가능 , static 변수도 마찬가지

main()은 정적메서드이고, 정적메서드는 정적메서드만 호출 가능하므로, main 내에서는 정적 메서드만 호출가능!

클래스 내에서 private 생성자 선언 : 인스턴스 생성을 막는다 -> static 메서드만 사용하는 클래스의 경우 이렇게 제약을 준다.